import os
from cryptography.fernet import Fernet
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

def decrypt_file(encrypted_file_path, output_file_path):
    """
    Decrypts an encrypted file using the ENCRYPTION_KEY from environment variables.
    Saves the decrypted content to a new file.
    """
    encryption_key = os.getenv('ENCRYPTION_KEY')

    if not encryption_key:
        print("Error: ENCRYPTION_KEY environment variable is not set.")
        print("Please ensure your .env file is present and contains ENCRYPTION_KEY,")
        print("or set the environment variable directly.")
        return False

    try:
        cipher = Fernet(encryption_key.encode('utf-8'))
    except Exception as e:
        print(f"Error: Invalid ENCRYPTION_KEY format. Details: {e}")
        print("Please ensure ENCRYPTION_KEY is a valid Fernet key generated by Fernet.generate_key().")
        return False

    if not os.path.exists(encrypted_file_path):
        print(f"Error: Encrypted file not found at '{encrypted_file_path}'")
        return False

    try:
        with open(encrypted_file_path, 'rb') as f_encrypted:
            encrypted_content = f_encrypted.read()
        
        decrypted_content = cipher.decrypt(encrypted_content)

        with open(output_file_path, 'wb') as f_decrypted:
            f_decrypted.write(decrypted_content)
        
        print(f"Success: File decrypted from '{encrypted_file_path}' to '{output_file_path}'")
        return True

    except Exception as e:
        print(f"Error during decryption: {e}")
        print("This might happen if the key is incorrect or the file is corrupted.")
        return False

if __name__ == "__main__":
    print("--- Decryption Test Utility ---")
    print("This script decrypts an encrypted file from your 'uploads' folder.")

    # Get a list of encrypted files in the uploads folder
    uploads_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'uploads')
    
    if not os.path.exists(uploads_dir):
        print(f"Error: 'uploads' directory not found at '{uploads_dir}'")
        exit()

    encrypted_files = [f for f in os.listdir(uploads_dir) if f.endswith('.encrypted')]

    if not encrypted_files:
        print("No .encrypted files found in the 'uploads' directory.")
        exit()

    print("\nAvailable encrypted files:")
    for i, filename in enumerate(encrypted_files):
        print(f"{i+1}. {filename}")

    while True:
        try:
            choice = int(input(f"Enter the number of the file to decrypt (1-{len(encrypted_files)}): "))
            if 1 <= choice <= len(encrypted_files):
                selected_file = encrypted_files[choice-1]
                break
            else:
                print("Invalid choice. Please enter a number within the range.")
        except ValueError:
            print("Invalid input. Please enter a number.")

    encrypted_full_path = os.path.join(uploads_dir, selected_file)
    
    # Suggest an output filename based on the original (before .encrypted)
    original_name_with_hash = selected_file.replace('.encrypted', '')
    # Try to extract the original filename part (after the hash)
    if '_' in original_name_with_hash:
        # Assuming format: hash_originalfilename.ext
        original_filename_part = original_name_with_hash.split('_', 1)[1]
    else:
        original_filename_part = original_name_with_hash # Fallback if no hash_ prefix

    output_filename = f"decrypted_{original_filename_part}"
    output_full_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), output_filename)

    decrypt_file(encrypted_full_path, output_full_path)


